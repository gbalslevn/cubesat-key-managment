Start testing: Mar 27 10:29 CET
----------------------------------------------------------
1/19 Testing: test_err
1/19 Test: test_err
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_err"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_err" start time: Mar 27 10:29 CET
Output:
----------------------------------------------------------

-- Tests for the ERR module:

Testing if not using try-catch is correct...                                  
ERROR in dummy2() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,54: not enough memory.
[1;32m[PASS]
[0mTesting if try-catch is correct and error message is printed...               
ERROR in dummy2() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,54: not enough memory.
[1;32m[PASS]
[0mTesting if throw in try-catch is correct and error message is printed...      
ERROR in dummy3() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,65: not enough memory.
	CAUGHT in dummy3() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,67.
[1;32m[PASS]
[0mTesting if throw in deep try-catch is correct and functions are printed...    
ERROR in dummy3() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,65: not enough memory.
	CAUGHT in dummy3() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,67.
	CAUGHT in dummy4() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_err.c,77.
[1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.16 sec
----------------------------------------------------------
Test Passed.
"test_err" end time: Mar 27 10:29 CET
"test_err" time elapsed: 00:00:00
----------------------------------------------------------

2/19 Testing: test_bn
2/19 Test: test_bn
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_bn"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_bn" start time: Mar 27 10:29 CET
Output:
----------------------------------------------------------

-- Tests for the BN module

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if absolute, negation and comparison are consistent...                [1;32m[PASS]
[0mTesting if signal test is correct...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if oddness test is correct...                                         [1;32m[PASS]
[0mTesting if assignment and bit counting are consistent...                      [1;32m[PASS]
[0mTesting if bit setting and getting are consistent...                          [1;32m[PASS]
[0mTesting if hamming weight is correct...                                       [1;32m[PASS]
[0mTesting if generating a random integer is consistent...                       [1;32m[PASS]
[0mTesting if reading and writing the first digit are consistent...              [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if different forms of assignment are consistent...                    [1;32m[PASS]
[0mTesting if reading and writing a positive number are consistent...            [1;32m[PASS]
[0mTesting if getting the size of a positive number is correct...                [1;32m[PASS]
[0mTesting if reading and writing a negative number are consistent...            [1;32m[PASS]
[0mTesting if getting the size of a negative number is correct...                [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication has negation property...                            [1;32m[PASS]
[0mTesting if multiplication by a positive number preserves order...             [1;32m[PASS]
[0mTesting if multiplication by a negative number reverses order...              [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if comba multiplication is correct...                                 [1;32m[PASS]
[0mTesting if karatsuba multiplication is correct...                             [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if comba squaring is correct...                                       [1;32m[PASS]
[0mTesting if karatsuba squaring is correct...                                   [1;32m[PASS]
[0mTesting if doubling is consistent...                                          [1;32m[PASS]
[0mTesting if halving is consistent...                                           [1;32m[PASS]
[0mTesting if shifting by 1 bit is consistent...                                 [1;32m[PASS]
[0mTesting if shifting by 2 bits is consistent...                                [1;32m[PASS]
[0mTesting if shifting by half digit is consistent...                            [1;32m[PASS]
[0mTesting if shifting by 1 digit is consistent...                               [1;32m[PASS]
[0mTesting if shifting by 2 digits is consistent...                              [1;32m[PASS]
[0mTesting if shifting by 1 digit and half is consistent...                      [1;32m[PASS]
[0mTesting if trivial division is correct...                                     [1;32m[PASS]
[0mTesting if trivial negative division is correct...                            [1;32m[PASS]
[0mTesting if trivial division by negative is correct...                         [1;32m[PASS]
[0mTesting if negative trivial division by negative is correct...                [1;32m[PASS]
[0mTesting if division is correct...                                             [1;32m[PASS]
[0mTesting if negative division is correct...                                    [1;32m[PASS]
[0mTesting if division by negative is correct...                                 [1;32m[PASS]
[0mTesting if negative division by negative is correct...                        [1;32m[PASS]
[0mTesting if basic reduction is correct...                                      [1;32m[PASS]
[0mTesting if barrett reduction is correct...                                    [1;32m[PASS]
[0mTesting if basic montgomery reduction is correct...                           [1;32m[PASS]
[0mTesting if comba montgomery reduction is correct...                           [1;32m[PASS]
[0mTesting if pseudo-mersenne reduction is correct...                            [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if square root of powers of 2 is correct...                           [1;32m[PASS]
[0mTesting if greatest common divisor is correct...                              [1;32m[PASS]
[0mTesting if extended greatest common divisor is correct...                     [1;32m[PASS]
[0mTesting if basic greatest common divisor is correct...                        [1;32m[PASS]
[0mTesting if basic extended greatest common divisor is correct...               [1;32m[PASS]
[0mTesting if binary greatest common divisor is correct...                       [1;32m[PASS]
[0mTesting if binary extended greatest common divisor is correct...              [1;32m[PASS]
[0mTesting if lehmer greatest common divisor is correct...                       [1;32m[PASS]
[0mTesting if lehmer extended greatest common divisor is correct...              [1;32m[PASS]
[0mTesting if midway extended greatest common divisor is correct...              [1;32m[PASS]
[0mTesting if least common multiple is correct...                                [1;32m[PASS]
[0mTesting if legendre symbol is correct...                                      [1;32m[PASS]
[0mTesting if legendre symbol is a homomorphism...                               [1;32m[PASS]
[0mTesting if legendre symbol satisfies quadratic reciprocity...                 [1;32m[PASS]
[0mTesting if jacobi symbol is correct...                                        [1;32m[PASS]
[0mTesting if jacobi symbol is a homomorphism...                                 [1;32m[PASS]
[0mTesting if jacobi symbol is consistent with gcd...                            [1;32m[PASS]
[0mTesting if jacobi symbol satisfies quadratic reciprocity...                   [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if subtraction of a single digit is consistent...                     [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0mTesting if division by a single digit is consistent...                        [1;32m[PASS]
[0mTesting if modular reduction modulo a digit is consistent...                  [1;32m[PASS]
[0mTesting if greatest common divisor with a digit is consistent...              [1;32m[PASS]
[0mTesting if extended greatest common divisor with a digit is consistent...     [1;32m[PASS]
[0mTesting if modular exponentiation with a digit is consistent...               [1;32m[PASS]
[0mTesting if window recoding is correct...                                      [1;32m[PASS]
[0mTesting if sliding window recoding is correct...                              [1;32m[PASS]
[0mTesting if naf recoding is correct...                                         [1;32m[PASS]
[0mTesting if tnaf recoding is correct...                                        [1;32m[PASS]
[0mTesting if regular tnaf recoding is correct...                                [1;32m[PASS]
[0mTesting if regular recoding is correct...                                     [1;32m[PASS]
[0mTesting if jsf recoding is correct...                                         [1;32m[PASS]
[0mTesting if glv recoding is correct...                                         [1;32m[PASS]
[0mTesting if glv-sac recoding is correct...                                     [1;32m[PASS]
[0mTesting if modular exponentiation is correct...                               [1;32m[PASS]
[0mTesting if modular exponentiation with zero power is correct...               [1;32m[PASS]
[0mTesting if modular exponentiation with negative power is correct...           [1;32m[PASS]
[0mTesting if basic modular exponentiation is correct...                         [1;32m[PASS]
[0mTesting if sliding window modular exponentiation is correct...                [1;32m[PASS]
[0mTesting if powering ladder modular exponentiation is correct...               [1;32m[PASS]
[0mTesting if simultaneous modular exponentiation is correct...                  [1;32m[PASS]
[0mTesting if simultaneous few modular exponentiations is correct...             [1;32m[PASS]
[0mTesting if simultaneous many modular exponentiation is correct...             [1;32m[PASS]
[0mTesting if chinese remainder theorem modular exponentiation is correct...     [1;32m[PASS]
[0mTesting if prime generation is consistent...                                  [1;32m[PASS]
[0mTesting if basic prime generation is consistent...                            [1;32m[PASS]
[0mTesting if safe prime generation is consistent...                             [1;32m[PASS]
[0mTesting if strong prime generation is consistent...                           [1;32m[PASS]
[0mTesting if basic prime testing is correct...                                  [1;32m[PASS]
[0mTesting if miller-rabin prime testing is correct...                           [1;32m[PASS]
[0mTesting if solovay-strassen prime testing is correct...                       [1;32m[PASS]
[0mTesting if prime with large (p-1) prime factor testing is correct...          [1;32m[PASS]
[0mTesting if prime testing of small primes is correct...                        [1;32m[PASS]
[0mTesting if miller-rabin testing of small primes is correct...                 [1;32m[PASS]
[0mTesting if prime testing of small non-primes is correct...                    [1;32m[PASS]
[0mTesting if miller-rabin testing of small non-primes is correct...             [1;32m[PASS]
[0mTesting if modular inversion is correct...                                    [1;32m[PASS]
[0mTesting if integer factorization is consistent...                             [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  30.93 sec
----------------------------------------------------------
Test Passed.
"test_bn" end time: Mar 27 10:30 CET
"test_bn" time elapsed: 00:00:30
----------------------------------------------------------

3/19 Testing: test_dv
3/19 Test: test_dv
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_dv"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_dv" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the DV module:

Testing if temporary memory can be allocated...                               [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if conditional copy and comparison are consistent...                  [1;32m[PASS]
[0mTesting if conditional swap and copy are consistent...                        [1;32m[PASS]
[0mTesting if conditional swap and comparison are consistent...                  [1;32m[PASS]
[0mTesting if shifting by  digit is consistent...                                [1;32m[PASS]
[0mTesting if shifting by 2 digits is consistent...                              [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"test_dv" end time: Mar 27 10:30 CET
"test_dv" time elapsed: 00:00:00
----------------------------------------------------------

4/19 Testing: test_fp
4/19 Test: test_fp
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_fp"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_fp" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the FP module

-- Prime modulus:
   FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF

** Utilities

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment and comparison are consistent...                        [1;32m[PASS]
[0mTesting if bit setting and getting are consistent...                          [1;32m[PASS]
[0mTesting if bit assignment and counting are consistent...                      [1;32m[PASS]
[0mTesting if reading and writing a prime field element are consistent...        [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0mTesting if converting to and from a prime field element are consistent...     [1;32m[PASS]
[0m
** Arithmetic

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if basic addition is correct...                                       [1;32m[PASS]
[0mTesting if integrated addition is correct...                                  [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if basic subtraction is correct...                                    [1;32m[PASS]
[0mTesting if integrated subtraction is correct...                               [1;32m[PASS]
[0mTesting if basic negation is correct...                                       [1;32m[PASS]
[0mTesting if integrated negation is correct...                                  [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if integrated multiplication is correct...                            [1;32m[PASS]
[0mTesting if comba multiplication is correct...                                 [1;32m[PASS]
[0mTesting if karatsuba multiplication is correct...                             [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if integrated squaring is correct...                                  [1;32m[PASS]
[0mTesting if comba squaring is correct...                                       [1;32m[PASS]
[0mTesting if karatsuba squaring is correct...                                   [1;32m[PASS]
[0mTesting if doubling is consistent...                                          [1;32m[PASS]
[0mTesting if basic doubling is correct...                                       [1;32m[PASS]
[0mTesting if integrated doubling is correct...                                  [1;32m[PASS]
[0mTesting if halving is consistent...                                           [1;32m[PASS]
[0mTesting if basic halving is correct...                                        [1;32m[PASS]
[0mTesting if integrated halving is correct...                                   [1;32m[PASS]
[0mTesting if trisecting is consistent...                                        [1;32m[PASS]
[0mTesting if shifting by 1 bit is consistent...                                 [1;32m[PASS]
[0mTesting if shifting by 2 bits is consistent...                                [1;32m[PASS]
[0mTesting if shifting by half digit is consistent...                            [1;32m[PASS]
[0mTesting if shifting by 1 digit is consistent...                               [1;32m[PASS]
[0mTesting if shifting by 2 digits is consistent...                              [1;32m[PASS]
[0mTesting if shifting by 1 digit and half is consistent...                      [1;32m[PASS]
[0mTesting if modular reduction is correct...                                    [1;32m[PASS]
[0mTesting if basic modular reduction is correct...                              [1;32m[PASS]
[0mTesting if montgomery modular reduction is correct...                         [1;32m[PASS]
[0mTesting if fast modular reduction is correct...                               [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if basic inversion is correct...                                      [1;32m[PASS]
[0mTesting if binary inversion is correct...                                     [1;32m[PASS]
[0mTesting if montgomery inversion is correct...                                 [1;32m[PASS]
[0mTesting if euclidean inversion is correct...                                  [1;32m[PASS]
[0mTesting if division step inversion is correct...                              [1;32m[PASS]
[0mTesting if jump division step inversion is correct...                         [1;32m[PASS]
[0mTesting if lower inversion is correct...                                      [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if symbol computation is correct...                                   [1;32m[PASS]
[0mTesting if basic symbol computation is correct...                             [1;32m[PASS]
[0mTesting if binary symbol computation is correct...                            [1;32m[PASS]
[0mTesting if division step symbol computation is correct...                     [1;32m[PASS]
[0mTesting if jump division step symbol computation is correct...                [1;32m[PASS]
[0mTesting if lower symbol computation is correct...                             [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if basic exponentiation is correct...                                 [1;32m[PASS]
[0mTesting if sliding window exponentiation is correct...                        [1;32m[PASS]
[0mTesting if constant-time exponentiation is correct...                         [1;32m[PASS]
[0mTesting if quadratic residuosity test is correct...                           [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if cubic residuosity test is correct...                               [1;32m[PASS]
[0mTesting if cube root extraction is correct...                                 [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if subtraction of a single digit is consistent...                     [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0mTesting if exponentiation by a single digit is consistent...                  [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   1.03 sec
----------------------------------------------------------
Test Passed.
"test_fp" end time: Mar 27 10:30 CET
"test_fp" time elapsed: 00:00:01
----------------------------------------------------------

5/19 Testing: test_fpx
5/19 Test: test_fpx
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_fpx"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_fpx" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the FPX module

-- Prime modulus:
   B64000000000FF2F2200000085FD5480B0001F44B6B88BF142BC818F95E3E6AF

-- Quadratic extension: -1 as QNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if basic addition is correct...                                       [1;32m[PASS]
[0mTesting if integrated addition is correct...                                  [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if basic subtraction is correct...                                    [1;32m[PASS]
[0mTesting if integrated subtraction is correct...                               [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if basic doubling is correct...                                       [1;32m[PASS]
[0mTesting if integrated doubling is correct...                                  [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if integrated multiplication is correct...                            [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if multiplication by quadratic/cubic non-residue is correct...        [1;32m[PASS]
[0mTesting if basic multiplication by qnr/cnr is correct...                      [1;32m[PASS]
[0mTesting if integrated multiplication by qnr/cnr is correct...                 [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if integrated squaring is correct...                                  [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if inversion of a unitary element is correct...                       [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0mTesting if exponentiation of cyclotomic element is correct...                 [1;32m[PASS]
[0mTesting if quadratic residuosity test is correct...                           [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if subtraction of a single digit is consistent...                     [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0m
-- Cubic extension: -2 as CNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if basic addition is correct...                                       [1;32m[PASS]
[0mTesting if integrated addition is correct...                                  [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if basic subtraction is correct...                                    [1;32m[PASS]
[0mTesting if integrated subtraction is correct...                               [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if basic doubling is correct...                                       [1;32m[PASS]
[0mTesting if integrated doubling is correct...                                  [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if integrated multiplication is correct...                            [1;32m[PASS]
[0mTesting if multiplication by cubic non-residue is correct...                  [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if integrated squaring is correct...                                  [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0mTesting if quadratic residuosity test is correct...                           [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if subtraction of a single digit is consistent...                     [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0m
-- Quartic extension: (i + 4) as QNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lazy-reduced multiplication is correct...                          [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if lazy-reduced squaring is correct...                                [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0mTesting if quadratic residuosity test is correct...                           [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if subtraction of a single digit is consistent...                     [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0m
-- Sextic extension: (i + 4) as CNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lazy-reduced multiplication is correct...                          [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if lazy-reduced squaring is correct...                                [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0m
-- Octic extension: (j) as CNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a finite field element is correct...           [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lazy-reduced multiplication is correct...                          [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if lazy-reduced squaring is correct...                                [1;32m[PASS]
[0mTesting if cyclotomic test is correct...                                      [1;32m[PASS]
[0mTesting if cyclotomic squaring is correct...                                  [1;32m[PASS]
[0mTesting if cyclotomic exponentiation is correct...                            [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if inversion of a unitary element is correct...                       [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0mTesting if quadratic residuosity test is correct...                           [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0m
-- Nonic extension: (j + 0) as CNR

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a prime field element is correct...            [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if doubling is correct...                                             [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lazy-reduced multiplication is correct...                          [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if lazy-reduced squaring is correct...                                [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0m
-- Dodecic extension:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation is consistent...                                          [1;32m[PASS]
[0mTesting if assignment to zero and comparison are consistent...                [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to zero and zero test are consistent...                 [1;32m[PASS]
[0mTesting if assignment to a constant and comparison are consistent...          [1;32m[PASS]
[0mTesting if reading and writing a finite field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a finite field element is correct...           [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if subtraction is anti-commutative...                                 [1;32m[PASS]
[0mTesting if subtraction has identity...                                        [1;32m[PASS]
[0mTesting if subtraction has inverse...                                         [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if multiplication by adjoined root is correct...                      [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lazy-reduced multiplication is correct...                          [1;32m[PASS]
[0mTesting if sparse multiplication is correct...                                [1;32m[PASS]
[0mTesting if basic sparse multiplication is correct...                          [1;32m[PASS]
[0mTesting if lazy-reduced sparse multiplication is correct...                   [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if lazy-reduced squaring is correct...                                [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if inversion of a unitary element is correct...                       [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if frobenius and exponentiation are consistent...                     [1;32m[PASS]
[0mTesting if cyclotomic test is correct...                                      [1;32m[PASS]
[0mTesting if compression in cyclotomic subgroup is correct...                   [1;32m[PASS]
[0mTesting if simultaneous decompression in cyclotomic subgroup is correct...    [1;32m[PASS]
[0mTesting if cyclotomic squaring is correct...                                  [1;32m[PASS]
[0mTesting if basic cyclotomic squaring is correct...                            [1;32m[PASS]
[0mTesting if lazy-reduced cyclotomic squaring is correct...                     [1;32m[PASS]
[0mTesting if compressed squaring is correct...                                  [1;32m[PASS]
[0mTesting if basic compressed squaring is correct...                            [1;32m[PASS]
[0mTesting if lazy-reduced compressed squaring is correct...                     [1;32m[PASS]
[0mTesting if cyclotomic exponentiation is correct...                            [1;32m[PASS]
[0mTesting if sparse cyclotomic exponentiation is correct...                     [1;32m[PASS]
[0mTesting if compression is consistent...                                       [1;32m[PASS]
[0mTesting if compression is consistent with reading and writing...              [1;32m[PASS]
[0mTesting if getting the size of a compressed field element is correct...       [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   4.91 sec
----------------------------------------------------------
Test Passed.
"test_fpx" end time: Mar 27 10:30 CET
"test_fpx" time elapsed: 00:00:04
----------------------------------------------------------

6/19 Testing: test_fb
6/19 Test: test_fb
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_fb"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_fb" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the FB module

-- Irreducible pentanomial:
   z^283 + z^12 + z^7 + z^5 + 1

** Utilities

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if assignment and comparison are consistent...                        [1;32m[PASS]
[0mTesting if bit setting and getting are consistent...                          [1;32m[PASS]
[0mTesting if bit assignment and counting are consistent...                      [1;32m[PASS]
[0mTesting if reading and writing a binary field element are consistent...       [1;32m[PASS]
[0mTesting if getting the size of a binary field element is correct...           [1;32m[PASS]
[0m
** Arithmetic

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if addition of the modulo f(z) is correct...                          [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if basic multiplication is correct...                                 [1;32m[PASS]
[0mTesting if lopez-dahab multiplication is correct...                           [1;32m[PASS]
[0mTesting if integrated multiplication is correct...                            [1;32m[PASS]
[0mTesting if karatsuba multiplication is correct...                             [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if basic squaring is correct...                                       [1;32m[PASS]
[0mTesting if table squaring is correct...                                       [1;32m[PASS]
[0mTesting if integrated squaring is correct...                                  [1;32m[PASS]
[0mTesting if square root extraction is correct...                               [1;32m[PASS]
[0mTesting if basic square root extraction is correct...                         [1;32m[PASS]
[0mTesting if fast square root extraction is correct...                          [1;32m[PASS]
[0mTesting if shifting by 1 bit is consistent...                                 [1;32m[PASS]
[0mTesting if shifting by 2 bits is consistent...                                [1;32m[PASS]
[0mTesting if shifting by half digit is consistent...                            [1;32m[PASS]
[0mTesting if shifting by 1 digit is consistent...                               [1;32m[PASS]
[0mTesting if shifting by 2 digits is consistent...                              [1;32m[PASS]
[0mTesting if shifting by 1 digit and half is consistent...                      [1;32m[PASS]
[0mTesting if modular reduction is correct...                                    [1;32m[PASS]
[0mTesting if basic modular reduction is correct...                              [1;32m[PASS]
[0mTesting if fast modular reduction is correct...                               [1;32m[PASS]
[0mTesting if trace is linear...                                                 [1;32m[PASS]
[0mTesting if basic trace is correct...                                          [1;32m[PASS]
[0mTesting if fast trace is correct...                                           [1;32m[PASS]
[0mTesting if solving a quadratic equation is correct...                         [1;32m[PASS]
[0mTesting if basic solve is correct...                                          [1;32m[PASS]
[0mTesting if fast solve is correct...                                           [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if basic inversion is correct...                                      [1;32m[PASS]
[0mTesting if binary inversion is correct...                                     [1;32m[PASS]
[0mTesting if almost inverse is correct...                                       [1;32m[PASS]
[0mTesting if euclidean inversion is correct...                                  [1;32m[PASS]
[0mTesting if brunner inversion is correct...                                    [1;32m[PASS]
[0mTesting if itoh-tsuji inversion is correct...                                 [1;32m[PASS]
[0mTesting if constant-time almost inversion is correct...                       [1;32m[PASS]
[0mTesting if lower inversion is correct...                                      [1;32m[PASS]
[0mTesting if simultaneous inversion is correct...                               [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if basic exponentiation is correct...                                 [1;32m[PASS]
[0mTesting if sliding window exponentiation is correct...                        [1;32m[PASS]
[0mTesting if constant-time exponentiation is correct...                         [1;32m[PASS]
[0mTesting if iterated squaring is correct...                                    [1;32m[PASS]
[0mTesting if iterated square-root is correct...                                 [1;32m[PASS]
[0mTesting if basic iterated squaring is correct...                              [1;32m[PASS]
[0mTesting if basic iterated square-root is correct...                           [1;32m[PASS]
[0mTesting if fast iterated squaring is correct...                               [1;32m[PASS]
[0mTesting if fast iterated square-root is correct...                            [1;32m[PASS]
[0mTesting if addition of a single digit is consistent...                        [1;32m[PASS]
[0mTesting if multiplication by a single digit is consistent...                  [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   1.47 sec
----------------------------------------------------------
Test Passed.
"test_fb" end time: Mar 27 10:30 CET
"test_fb" time elapsed: 00:00:01
----------------------------------------------------------

7/19 Testing: test_fbx
7/19 Test: test_fbx
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_fbx"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_fbx" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the FBX module

-- Quadratic extension:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if assignment and comparison are consistent...                        [1;32m[PASS]
[0m
** Arithmetic:

Testing if addition is commutative...                                         [1;32m[PASS]
[0mTesting if addition is associative...                                         [1;32m[PASS]
[0mTesting if addition has identity...                                           [1;32m[PASS]
[0mTesting if addition has inverse...                                            [1;32m[PASS]
[0mTesting if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication is distributive...                                  [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if multiplication has zero property...                                [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if solving a quadratic equation is correct...                         [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.50 sec
----------------------------------------------------------
Test Passed.
"test_fbx" end time: Mar 27 10:30 CET
"test_fbx" time elapsed: 00:00:00
----------------------------------------------------------

8/19 Testing: test_ep
8/19 Test: test_ep
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_ep"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_ep" start time: Mar 27 10:30 CET
Output:
----------------------------------------------------------

-- Tests for the EP module:

-- Curve NIST-P256:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point addition in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point doubling in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if sliding window point multiplication is correct...                  [1;32m[PASS]
[0mTesting if montgomery ladder point multiplication is correct...               [1;32m[PASS]
[0mTesting if left-to-right w-naf point multiplication is correct...             [1;32m[PASS]
[0mTesting if left-to-right regular point multiplication is correct...           [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w-naf fixed point multiplication is correct...       [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if many simultaneous point multiplications are correct...             [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0mTesting if basic point hashing is correct...                                  [1;32m[PASS]
[0mTesting if simplified SWU point hashing is correct...                         [1;32m[PASS]
[0m
-- Curve SECG-K256:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point addition in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point doubling in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if endomorphism is correct...                                         [1;32m[PASS]
[0mTesting if endomorphism in affine coordinates is correct...                   [1;32m[PASS]
[0mTesting if endomorphism in projective coordinates is correct...               [1;32m[PASS]
[0mTesting if endomorphism in jacobian coordinates is correct...                 [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if sliding window point multiplication is correct...                  [1;32m[PASS]
[0mTesting if montgomery ladder point multiplication is correct...               [1;32m[PASS]
[0mTesting if left-to-right w-naf point multiplication is correct...             [1;32m[PASS]
[0mTesting if left-to-right regular point multiplication is correct...           [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w-naf fixed point multiplication is correct...       [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if many simultaneous point multiplications are correct...             [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0mTesting if basic point hashing is correct...                                  [1;32m[PASS]
[0mTesting if simplified SWU point hashing is correct...                         [1;32m[PASS]
[0mTesting if swift point hashing is correct...                                  [1;32m[PASS]
[0m
-- Curve BN-P256:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point addition in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point doubling in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if endomorphism is correct...                                         [1;32m[PASS]
[0mTesting if endomorphism in affine coordinates is correct...                   [1;32m[PASS]
[0mTesting if endomorphism in projective coordinates is correct...               [1;32m[PASS]
[0mTesting if endomorphism in jacobian coordinates is correct...                 [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if sliding window point multiplication is correct...                  [1;32m[PASS]
[0mTesting if montgomery ladder point multiplication is correct...               [1;32m[PASS]
[0mTesting if left-to-right w-naf point multiplication is correct...             [1;32m[PASS]
[0mTesting if left-to-right regular point multiplication is correct...           [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w-naf fixed point multiplication is correct...       [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if many simultaneous point multiplications are correct...             [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0mTesting if basic point hashing is correct...                                  [1;32m[PASS]
[0mTesting if simplified SWU point hashing is correct...                         [1;32m[PASS]
[0mTesting if swift point hashing is correct...                                  [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  43.55 sec
----------------------------------------------------------
Test Passed.
"test_ep" end time: Mar 27 10:31 CET
"test_ep" time elapsed: 00:00:43
----------------------------------------------------------

9/19 Testing: test_epx
9/19 Test: test_epx
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_epx"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_epx" start time: Mar 27 10:31 CET
Output:
----------------------------------------------------------

-- Tests for the EPX module

-- Curve BN-P256:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point addition in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point doubling in jacobian coordinates is correct...               [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if frobenius and point multiplication are consistent...               [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if sliding window point multiplication is correct...                  [1;32m[PASS]
[0mTesting if montgomery ladder point multiplication is correct...               [1;32m[PASS]
[0mTesting if left-to-right w-naf point multiplication is correct...             [1;32m[PASS]
[0mTesting if left-to-right regular point multiplication is correct...           [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w-naf fixed point multiplication is correct...       [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if many simultaneous point multiplications are correct...             [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0mTesting if basic point hashing is correct...                                  [1;32m[PASS]
[0mTesting if simplified SWU point hashing is correct...                         [1;32m[PASS]
[0mTesting if swift point hashing is correct...                                  [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  33.31 sec
----------------------------------------------------------
Test Passed.
"test_epx" end time: Mar 27 10:31 CET
"test_epx" time elapsed: 00:00:33
----------------------------------------------------------

10/19 Testing: test_eb
10/19 Test: test_eb
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_eb"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_eb" start time: Mar 27 10:31 CET
Output:
----------------------------------------------------------

-- Tests for the EB module:

-- Curve NIST-B283:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point subtraction in affine coordinates is correct...              [1;32m[PASS]
[0mTesting if point subtraction in projective coordinates is correct...          [1;32m[PASS]
[0mTesting if point subtraction in mixed coordinates (z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction in mixed coordinates (z1,z2 = 1) is correct...   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point halving is correct...                                        [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if lopez-dahab point multiplication is correct...                     [1;32m[PASS]
[0mTesting if left-to-right w-(t)naf point multiplication is correct...          [1;32m[PASS]
[0mTesting if right-to-left w-(t)naf point multiplication is correct...          [1;32m[PASS]
[0mTesting if point multiplication by halving is correct...                      [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w(t)naf fixed point multiplication is correct...     [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0m
-- Curve NIST-K283:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random and comparison are consistent...              [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point addition in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point addition in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z2 = 1) is correct...         [1;32m[PASS]
[0mTesting if point addition in mixed coordinates (z1,z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point subtraction in affine coordinates is correct...              [1;32m[PASS]
[0mTesting if point subtraction in projective coordinates is correct...          [1;32m[PASS]
[0mTesting if point subtraction in mixed coordinates (z2 = 1) is correct...      [1;32m[PASS]
[0mTesting if point subtraction in mixed coordinates (z1,z2 = 1) is correct...   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if point doubling in affine coordinates is correct...                 [1;32m[PASS]
[0mTesting if point doubling in projective coordinates is correct...             [1;32m[PASS]
[0mTesting if point doubling in mixed coordinates (z1 = 1) is correct...         [1;32m[PASS]
[0mTesting if point halving is correct...                                        [1;32m[PASS]
[0mTesting if frobenius map is correct...                                        [1;32m[PASS]
[0mTesting if frobenius in affine coordinates is correct...                      [1;32m[PASS]
[0mTesting if frobenius in projective coordinates is correct...                  [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if binary point multiplication is correct...                          [1;32m[PASS]
[0mTesting if lopez-dahab point multiplication is correct...                     [1;32m[PASS]
[0mTesting if left-to-right w-(t)naf point multiplication is correct...          [1;32m[PASS]
[0mTesting if right-to-left w-(t)naf point multiplication is correct...          [1;32m[PASS]
[0mTesting if point multiplication by halving is correct...                      [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if binary fixed point multiplication is correct...                    [1;32m[PASS]
[0mTesting if single-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if double-table comb fixed point multiplication is correct...         [1;32m[PASS]
[0mTesting if left-to-right w(t)naf fixed point multiplication is correct...     [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if basic simultaneous point multiplication is correct...              [1;32m[PASS]
[0mTesting if shamir's trick for simultaneous multiplication is correct...       [1;32m[PASS]
[0mTesting if interleaving for simultaneous multiplication is correct...         [1;32m[PASS]
[0mTesting if jsf for simultaneous multiplication is correct...                  [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  36.43 sec
----------------------------------------------------------
Test Passed.
"test_eb" end time: Mar 27 10:32 CET
"test_eb" time elapsed: 00:00:36
----------------------------------------------------------

11/19 Testing: test_ed
11/19 Test: test_ed
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_ed"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_ed" start time: Mar 27 10:32 CET
Output:
----------------------------------------------------------

-- Tests for the ED module:

ERROR in main() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_ed.c,1335: no curve supported at this security level.
<end of output>
Test time =   0.36 sec
----------------------------------------------------------
Test Passed.
"test_ed" end time: Mar 27 10:32 CET
"test_ed" time elapsed: 00:00:00
----------------------------------------------------------

12/19 Testing: test_ec
12/19 Test: test_ec
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_ec"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_ec" start time: Mar 27 10:32 CET
Output:
----------------------------------------------------------

-- Tests for the EC module:

-- Curve NIST-P256:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random/infinity and comparison are consistent...     [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if point multiplication is correct...                                 [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if point compression is correct...                                    [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   3.14 sec
----------------------------------------------------------
Test Passed.
"test_ec" end time: Mar 27 10:32 CET
"test_ec" time elapsed: 00:00:03
----------------------------------------------------------

13/19 Testing: test_pc
13/19 Test: test_pc
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_pc"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_pc" start time: Mar 27 10:32 CET
Output:
----------------------------------------------------------

-- Tests for the PC module:

-- Curve BN-P256:

-- Group G_1:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if inversion and comparison are consistent...                         [1;32m[PASS]
[0mTesting if assignment to random/infinity and comparison are consistent...     [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if random element has the right order...                              [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0m
-- Group G_2:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if negation and comparison are consistent...                          [1;32m[PASS]
[0mTesting if assignment to random/infinity and comparison are consistent...     [1;32m[PASS]
[0mTesting if assignment to infinity and infinity test are consistent...         [1;32m[PASS]
[0mTesting if reading and writing a point are consistent...                      [1;32m[PASS]
[0m
** Arithmetic:

Testing if point addition is commutative...                                   [1;32m[PASS]
[0mTesting if point addition is associative...                                   [1;32m[PASS]
[0mTesting if point addition has identity...                                     [1;32m[PASS]
[0mTesting if point addition has inverse...                                      [1;32m[PASS]
[0mTesting if point subtraction is anti-commutative...                           [1;32m[PASS]
[0mTesting if point subtraction has identity...                                  [1;32m[PASS]
[0mTesting if point subtraction has inverse...                                   [1;32m[PASS]
[0mTesting if point doubling is correct...                                       [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator multiplication is correct...                             [1;32m[PASS]
[0mTesting if random element has the right order...                              [1;32m[PASS]
[0mTesting if point multiplication by digit is correct...                        [1;32m[PASS]
[0mTesting if fixed point multiplication is correct...                           [1;32m[PASS]
[0mTesting if simultaneous point multiplication is correct...                    [1;32m[PASS]
[0mTesting if simultaneous multiplication with generator is correct...           [1;32m[PASS]
[0mTesting if validity test is correct...                                        [1;32m[PASS]
[0mTesting if blinding is consistent...                                          [1;32m[PASS]
[0mTesting if point hashing is correct...                                        [1;32m[PASS]
[0m
-- Group G_T:

** Utilities:

Testing if memory can be allocated...                                         [1;32m[PASS]
[0mTesting if comparison is consistent...                                        [1;32m[PASS]
[0mTesting if copy and comparison are consistent...                              [1;32m[PASS]
[0mTesting if inversion and comparison are consistent...                         [1;32m[PASS]
[0mTesting if assignment to random/infinity and comparison are consistent...     [1;32m[PASS]
[0mTesting if assignment to unity and unity test are consistent...               [1;32m[PASS]
[0m
** Arithmetic:

Testing if multiplication is commutative...                                   [1;32m[PASS]
[0mTesting if multiplication is associative...                                   [1;32m[PASS]
[0mTesting if multiplication has identity...                                     [1;32m[PASS]
[0mTesting if squaring is correct...                                             [1;32m[PASS]
[0mTesting if inversion is correct...                                            [1;32m[PASS]
[0mTesting if generator has the right order...                                   [1;32m[PASS]
[0mTesting if generator exponentiation is correct...                             [1;32m[PASS]
[0mTesting if random element has the right order...                              [1;32m[PASS]
[0mTesting if exponentiation is correct...                                       [1;32m[PASS]
[0mTesting if validity check is correct...                                       [1;32m[PASS]
[0mTesting if pairing non-degeneracy is correct...                               [1;32m[PASS]
[0mTesting if pairing is bilinear...                                             [1;32m[PASS]
[0mTesting if multi-pairing is correct...                                        [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  14.89 sec
----------------------------------------------------------
Test Passed.
"test_pc" end time: Mar 27 10:32 CET
"test_pc" time elapsed: 00:00:14
----------------------------------------------------------

14/19 Testing: test_pp
14/19 Test: test_pp
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_pp"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_pp" start time: Mar 27 10:32 CET
Output:
----------------------------------------------------------

-- Tests for the PP module

-- Curve BN-P256:

** Arithmetic

Testing if miller doubling is correct...                                      [1;32m[PASS]
[0mTesting if miller doubling in affine coordinates is correct...                [1;32m[PASS]
[0mTesting if miller doubling in projective coordinates is correct...            [1;32m[PASS]
[0mTesting if basic projective miller doubling is correct...                     [1;32m[PASS]
[0mTesting if lazy-reduced projective miller doubling is consistent...           [1;32m[PASS]
[0mTesting if miller addition is correct...                                      [1;32m[PASS]
[0mTesting if miller addition in affine coordinates is correct...                [1;32m[PASS]
[0mTesting if miller addition in projective coordinates is correct...            [1;32m[PASS]
[0mTesting if basic projective miller addition is consistent...                  [1;32m[PASS]
[0mTesting if lazy-reduced projective miller addition is consistent...           [1;32m[PASS]
[0mTesting if pairing non-degeneracy is correct...                               [1;32m[PASS]
[0mTesting if pairing is bilinear...                                             [1;32m[PASS]
[0mTesting if multi-pairing is correct...                                        [1;32m[PASS]
[0mTesting if tate pairing non-degeneracy is correct...                          [1;32m[PASS]
[0mTesting if tate pairing is bilinear...                                        [1;32m[PASS]
[0mTesting if tate multi-pairing is correct...                                   [1;32m[PASS]
[0mTesting if weil pairing non-degeneracy is correct...                          [1;32m[PASS]
[0mTesting if weil pairing is bilinear...                                        [1;32m[PASS]
[0mTesting if weil multi-pairing is correct...                                   [1;32m[PASS]
[0mTesting if optimal ate pairing non-degeneracy is correct...                   [1;32m[PASS]
[0mTesting if optimal ate pairing is bilinear...                                 [1;32m[PASS]
[0mTesting if optimal ate multi-pairing is correct...                            [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =  29.12 sec
----------------------------------------------------------
Test Passed.
"test_pp" end time: Mar 27 10:33 CET
"test_pp" time elapsed: 00:00:29
----------------------------------------------------------

15/19 Testing: test_md
15/19 Test: test_md
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_md"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_md" start time: Mar 27 10:33 CET
Output:
----------------------------------------------------------

-- Tests for the MD module:

Testing if sha224 hash function is correct...                                 [1;32m[PASS]
[0mTesting if sha224 xmd function is correct...                                  [1;32m[PASS]
[0mTesting if sha256 hash function is correct...                                 [1;32m[PASS]
[0mTesting if sha256 xmd function is correct...                                  [1;32m[PASS]
[0mTesting if sha384 hash function is correct...                                 [1;32m[PASS]
[0mTesting if sha384 xmd function is correct...                                  [1;32m[PASS]
[0mTesting if sha512 hash function is correct...                                 [1;32m[PASS]
[0mTesting if sha512 xmd function is correct...                                  [1;32m[PASS]
[0mTesting if key derivation function (sha256) is correct...                     [1;32m[PASS]
[0mTesting if hmac (sha256) is correct...                                        [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.65 sec
----------------------------------------------------------
Test Passed.
"test_md" end time: Mar 27 10:33 CET
"test_md" time elapsed: 00:00:00
----------------------------------------------------------

16/19 Testing: test_cp
16/19 Test: test_cp
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_cp"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_cp" start time: Mar 27 10:33 CET
Output:
----------------------------------------------------------

-- Tests for the CP module

-- Protocols based on integer factorization:

Testing if rsa encryption/decryption is correct...                            [1;32m[PASS]
[0mTesting if rsa signature/verification is correct...                           [1;32m[PASS]
[0mTesting if rabin encryption/decryption is correct...                          [1;32m[PASS]
[0mTesting if benaloh encryption/decryption is correct...                        [1;32m[PASS]
[0mTesting if benaloh encryption/decryption is homomorphic...                    [1;32m[PASS]
[0mTesting if paillier encryption/decryption is correct...                       [1;32m[PASS]
[0mTesting if paillier encryption/decryption is homomorphic...                   [1;32m[PASS]
[0m(s = 1) Testing if general paillier encryption/decryption is correct...               [1;32m[PASS]
[0m(s = 1) Testing if general paillier encryption/decryption is homomorphic...           [1;32m[PASS]
[0m(s = 2) Testing if general paillier encryption/decryption is correct...               [1;32m[PASS]
[0m(s = 2) Testing if general paillier encryption/decryption is homomorphic...           [1;32m[PASS]
[0m(o = 170, |n| = 512) Testing if subgroup paillier encryption/decryption is correct...              [1;32m[PASS]
[0m(o = 170, |n| = 512) Testing if subgroup paillier faster encryption with private key is correct... [1;32m[PASS]
[0m(o = 170, |n| = 512) Testing if subgroup paillier encryption/decryption is homomorphic...          [1;32m[PASS]
[0m(o = 128, |n| = 512) Testing if subgroup paillier encryption/decryption is correct...              [1;32m[PASS]
[0m(o = 128, |n| = 512) Testing if subgroup paillier faster encryption with private key is correct... [1;32m[PASS]
[0m(o = 128, |n| = 512) Testing if subgroup paillier encryption/decryption is homomorphic...          [1;32m[PASS]
[0m(o = 102, |n| = 512) Testing if subgroup paillier encryption/decryption is correct...              [1;32m[PASS]
[0m(o = 102, |n| = 512) Testing if subgroup paillier faster encryption with private key is correct... [1;32m[PASS]
[0m(o = 102, |n| = 512) Testing if subgroup paillier encryption/decryption is homomorphic...          [1;32m[PASS]
[0m
-- Protocols based on elliptic curves:

Testing if ecdh key agreement is correct...                                   [1;32m[PASS]
[0mTesting if ecmqv authenticated key agreement is correct...                    [1;32m[PASS]
[0mTesting if ecies encryption/decryption is correct...                          [1;32m[PASS]
[0mTesting if ecies satisfies test vectors...                                    [1;32m[PASS]
[0mTesting if ecdsa signature is correct...                                      [1;32m[PASS]
[0mTesting if ecss signature is correct...                                       [1;32m[PASS]
[0mTesting if vbnn signature is correct...                                       [1;32m[PASS]
[0mTesting if proof of knowledge of discrete logarithm is correct...             [1;32m[PASS]
[0mTesting if proof of knowledge of disjunction is correct...                    [1;32m[PASS]
[0mTesting if signature of knowledge of discrete logarithm is correct...         [1;32m[PASS]
[0mTesting if signature of knowledge of disjunction is correct...                [1;32m[PASS]
[0mTesting if extendable ring signature scheme is correct...                     [1;32m[PASS]
[0mTesting if same-message linkable ext. ring signature scheme is correct...     [1;32m[PASS]
[0mTesting if extendable threshold ring signature scheme is correct...           [1;32m[PASS]
[0m
-- Protocols based on pairings:

Testing if delegated pairing computation with public inputs is correct...     [1;32m[PASS]
[0mTesting if faster delegated pairing with public inputs is correct...          [1;32m[PASS]
[0mTesting if delegated pairing computation with private inputs is correct...    [1;32m[PASS]
[0mTesting if faster delegated pairing with private inputs is correct...         [1;32m[PASS]
[0mTesting if sakai-ohgishi-kasahara auth key agreement is correct...            [1;32m[PASS]
[0mTesting if boneh-franklin identity-based encryption/decryption is correct...  [1;32m[PASS]
[0mTesting if boneh-go-nissim encryption/decryption is correct...                [1;32m[PASS]
[0mTesting if boneh-go-nissim encryption is additively homomorphic...            [1;32m[PASS]
[0mTesting if boneh-go-nissim encryption is multiplicatively homomorphic...      [1;32m[PASS]
[0mTesting if boneh-lynn-schacham short signature is correct...                  [1;32m[PASS]
[0mTesting if boneh-boyen short signature is correct...                          [1;32m[PASS]
[0mTesting if camenisch-lysyanskaya simple signature is correct...               [1;32m[PASS]
[0mTesting if camenisch-lysyanskaya message-independent signature is correct...  [1;32m[PASS]
[0mTesting if camenisch-lysyanskaya message-block signature is correct...        [1;32m[PASS]
[0mTesting if pointcheval-sanders simple signature is correct...                 [1;32m[PASS]
[0mTesting if pointcheval-sanders block signature is correct...                  [1;32m[PASS]
[0mTesting if multi-party pointcheval-sanders simple signature is correct...     [1;32m[PASS]
[0mTesting if multi-party pointcheval-sanders block signature is correct...      [1;32m[PASS]
[0mTesting if zhang-safavi-naini-susilo signature is correct...                  [1;32m[PASS]
[0mTesting if context-hiding linear homomorphic signature is correct...          [1;32m[PASS]
[0mTesting if simple linear multi-key homomorphic signature is correct...        [1;32m[PASS]
[0m
-- Protocols based on accumulators:

Testing if factoring-based laconic private set intersection is correct...     [1;32m[PASS]
[0mTesting if factoring-based size-hiding private set intersection is correct... [1;32m[PASS]
[0mTesting if pairing-based laconic private set intersection is correct...       [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time = 106.45 sec
----------------------------------------------------------
Test Passed.
"test_cp" end time: Mar 27 10:35 CET
"test_cp" time elapsed: 00:01:46
----------------------------------------------------------

17/19 Testing: test_mpc
17/19 Test: test_mpc
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_mpc"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_mpc" start time: Mar 27 10:35 CET
Output:
----------------------------------------------------------

-- Tests for the MPC module:


** Utilities:

Testing if multiplication triples are generated correctly...                  [1;32m[PASS]
[0mTesting if multiplication triples are consistent...                           [1;32m[PASS]
[0mTesting if shamir secret shares are generated correctly...                    [1;32m[PASS]
[0m
-- Curve BN-P256:

** Arithmetic:

Testing if scalar multiplication triples in g1 are consistent...              [1;32m[PASS]
[0mTesting if scalar multiplication triples in g2 are consistent...              [1;32m[PASS]
[0mTesting if exponentiation triples in target group are consistent...           [1;32m[PASS]
[0mTesting if pairing triples are consistent...                                  [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   5.31 sec
----------------------------------------------------------
Test Passed.
"test_mpc" end time: Mar 27 10:35 CET
"test_mpc" time elapsed: 00:00:05
----------------------------------------------------------

18/19 Testing: test_rand
18/19 Test: test_rand
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_rand"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_rand" start time: Mar 27 10:35 CET
Output:
----------------------------------------------------------

-- Tests for the RAND module:

Testing if hash-dbrg (sha-256) random generator is correct...                 [1;32m[PASS]
[0mTesting if hash-dbrg (sha-256) reseeding is correct...                        [1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"test_rand" end time: Mar 27 10:35 CET
"test_rand" time elapsed: 00:00:00
----------------------------------------------------------

19/19 Testing: test_core
19/19 Test: test_core
Command: "/Users/gustavnielsen/Documents/Kode.nosync/relic-target/bin/test_core"
Directory: /Users/gustavnielsen/Documents/Kode.nosync/relic-target/test
"test_core" start time: Mar 27 10:35 CET
Output:
----------------------------------------------------------

-- Tests for the CORE module:

Testing if the library context is consistent...                               [1;32m[PASS]
[0mTesting if switching the library context is correct...                        
ERROR in main() at /Users/gustavnielsen/Documents/Kode.nosync/relic-0.7.0/test/test_core.c,92: not enough memory.
[1;32m[PASS]
[0m
-- All tests have passed.

<end of output>
Test time =   0.17 sec
----------------------------------------------------------
Test Passed.
"test_core" end time: Mar 27 10:35 CET
"test_core" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Mar 27 10:35 CET
